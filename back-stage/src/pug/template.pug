doctype html
html(lang='tw')
    head
        meta(name="viewport" content="width=device-width, initial-scale=1")
        meta(charset='UTF-8')
        meta(http-equiv='X-UA-Compatible', content='ie=edge')
        meta(http-equiv='cache-control', content='no-cache')
        meta(http-equiv='pragma', content='no-cache')
        meta(http-equiv='expires', content='0')
        link(rel='icon' type='image/png' href='./img/favicon.png')
        link(href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" rel="stylesheet")
        title

    body
        nav-bar(current="template")        
        #app.container.mt-3
            table.table.table-striped.table-bordered
                tr
                    td.table-info(width='150') 樣板名稱
                    td(data-field = "name") 
                tr
                    td.table-info(width='150') 樣板連結
                        span.badge.badge-info#copy(style="cursor:pointer") copy
                    td#url 
                tr
                    td.table-info 創建日期
                    td(data-field = "createDate") 
                tr
                    td.table-info 樣板作者
                    td(data-field = "author")
                tr                       
                    td.table-info 前導訊息
                    td(data-field = "description") 
                tr
                    td.table-info 結束訊息
                    td(data-field = "finishMsg") 
                tr
                    td.table-info Call Back URL
                    td(data-field = "callBackUrl") 
                tr
                    td.table-info 其他
                    td(data-field="extraInfo") 
                tr
                    td.table-info Tags
                    td(data-field="tags") 
            table.table.table-striped.table-bordered#questionList
                tr
                    td.table-info 題目
                    td.table-info(width='80') 類型
                    td.table-info 選項
                    td.table-info(width='80') 必填
    script(src="./js/navbar.js")
    script(src="./js/dataprovider/questionnaire.js")
    script.
      (() => {
      const search = (new URL(window.location)).searchParams;
      const templateId = search.get('id');

      async function init(){

      const template = await window.eHanlin.dataprovider.questionnaire.getTemplate(templateId)
      composeFields(template);
      composeQuestions(template);
      }

      function composeFields(template){
          if(template.tags==null || template.tags.length==0){
             template.tags = [""]; 
          }
      document.querySelectorAll('[data-field]').forEach(it => {
      const field = it.dataset.field
      if(field === 'createDate'){
      it.innerText = Intl.DateTimeFormat('zh-TW').format(new Date(template[field]))
      }else{
      it.innerText = template[field]; 
      }          
      })
      document.querySelector('#url').innerText = `https://${window.location.host}/app/survey/index.html?id=${templateId}`;
      document.querySelector('#copy').addEventListener('click', copyLink);
      }
      
      function copyLink(){
      const link = document.getElementById('url')
      const range = document.createRange();
      range.selectNodeContents(link);
      const sel = window.getSelection();
      sel.removeAllRanges();
      sel.addRange(range);
      document.execCommand('copy')
      }

      function composeQuestions(template){
      const questionList = document.querySelector('#questionList');
        template.questions.forEach((it, idx) => {
            if(it.qid!=null){
                it.qContent.forEach((content, cIndex) => {
                let sendIndex = idx;
                if(cIndex>0){
                    sendIndex = null;
                }
                createItem(template.phase, questionList, it.qid, content, sendIndex);
            });
            }else{
                createItem(template.phase, questionList, it.qid, it, idx);
            }
        })
      }

      const createItem = (phase, questionList, qid, content, index) => {
        const tr = document.createElement('tr');
        tr.innerHTML = questionTemplate(content, index);
        questionList.append(tr);
        phase.forEach((p, pIndex)=>{
            if(qid!=null && p.lastQuestionId==qid && index!=null){ //index null表與上同題
                const divLine = document.createElement('div');
                divLine.innerHTML = `---階段${p.phase+1}---`;
                questionList.append(divLine);
            }
        });
      }

      const questionTemplate = (question, idx) => {
          let htmlString = `
            <td>${idx + 1}. ${question.topic}</td>
            <td>${question.type}</td>
            <td>${question.options ? question.options : '無'}</td>
            <td>${question.required ? '是' : '否'}</td>
            `;
        if(idx==null)
            htmlString = `
            <td>${question.topic}</td>
            <td>${question.type}</td>
            <td>${question.options ? question.options : '無'}</td>
            <td>${question.required ? '是' : '否'}</td>
            `;
        return htmlString;
      }
      
      init();
      })();