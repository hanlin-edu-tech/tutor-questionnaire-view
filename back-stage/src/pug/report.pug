doctype html
html(lang='tw')
    head
        meta(name="viewport" content="width=device-width, initial-scale=1")
        meta(charset='UTF-8')
        meta(http-equiv='X-UA-Compatible', content='ie=edge')
        meta(http-equiv='cache-control', content='no-cache')
        meta(http-equiv='pragma', content='no-cache')
        meta(http-equiv='expires', content='0')
        link(rel='icon' type='image/png' href='./img/favicon.png')
        link(href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" rel="stylesheet")
        title

    body
        nav-bar(current="report")        
        #app.container.mt-3
            h3 報表明細
            div.topRow
                div.datepicker
                    input#datepickerLeft 
                    p 到 
                    input#datepickerRight
                button.export 匯出
            div.displayRow
                h5 撈取資料數：
                select.countSelect(name="countMenu")
                    option(value="100") 100
                    option(value="250") 250
                    option(value="500") 500 
                    option(value="1000") 1000 
                
                h5 類別：
                select.typeSelect(name="typeMenu")
                    option(value="0") 全部

            nav.pagination-nav(aria-label="Page")
                ul.pagination

            table.table.table-striped.table-bordered#questionList
                tr

    link(rel='stylesheet', href='./css/jquery-ui.min.css')
    link(rel='stylesheet', href='./css/report.css')
    script(src="./js/jquery-3.3.1.min.js")
    script(src="./js/jquery-ui.min.js")
    script(src="./js/jquery.table2excel.min.js")
    script(src="./js/navbar.js")
    script(src="./js/dataprovider/questionnaire.js")
    script.
      $(".export").click(function(){
          let now = new Date();
          now.setTime(now.getTime() + (8*60*60*1000));
        $("#questionList").table2excel({
            name:"Worksheet Name",
            filename:`${now.toISOString().slice(0,19).replace('T', " ")}`,
            fileext:".xls"
        });
      });

      (() => {
        $( "#datepickerLeft" ).datepicker({
            showButtonPanel: true,
            gotoCurrent : true,
            changeMonth: true,
            changeYear: true,
            dateFormat: 'yy-mm-dd' });
        let lastWeek = new Date();
        lastWeek.setTime(lastWeek.getTime() - (24*60*60*1000*7));
        $('#datepickerLeft').datepicker('setDate', lastWeek);
        $( "#datepickerRight" ).datepicker({
            showButtonPanel: true,
            gotoCurrent : true,
            changeMonth: true,
            changeYear: true,
            dateFormat: 'yy-mm-dd' });
        $('#datepickerRight').datepicker('setDate', 'today');
    
        const search = (new URL(window.location)).searchParams;
        const templateId = search.get('id');
        const pagination = 5; //nav一次顯示幾頁
        const paginationCount = 25; //列表一次顯示幾筆

        let count = 100;
        let contentLength = 0;
        let pageCount = 0;
        let currentPage = 0;
        let typeSelectNum = 0;
        let originData = null;

        async function getQuestionnaireData() {
            let start = document.querySelector('#datepickerLeft').value;
            let startArr = `${start} 00:00:00`.split(/-|\s|:/);
            let startDate = new Date(startArr[0], startArr[1] -1, startArr[2], startArr[3], startArr[4], startArr[5]);
            let end = document.querySelector('#datepickerRight').value;
            let endArr = `${end} 23:59:59`.split(/-|\s|:/);
            let endDate = new Date(endArr[0], endArr[1] -1, endArr[2], endArr[3], endArr[4], endArr[5]);
            if(startDate>endDate){
                startArr = `${end} 00:00:00`.split(/-|\s|:/);
                startDate = new Date(startArr[0], startArr[1] -1, startArr[2], startArr[3], startArr[4], startArr[5]);

                endArr = `${start} 23:59:59`.split(/-|\s|:/);
                endDate = new Date(endArr[0], endArr[1] -1, endArr[2], endArr[3], endArr[4], endArr[5]);
            }
            let date = {startDate: startDate, endDate: endDate};
            return await window.eHanlin.dataprovider.questionnaire.getQuestionnairesByTemplateId(templateId, count, date);
        }

        function setDate(){
            getQuestionnaireData().then(data => {
                originData = data;
                composeTable(filterData(originData));
            });   
        }

        function init(){
            addFilter();
            setDate();

            document.querySelector('.countSelect').addEventListener('change', (event) => {
                count = event.target.value;
                setDate();
            });

            document.querySelector('.typeSelect').addEventListener('change', (event) => {
              typeSelectNum = event.target.value;
              composeTable(filterData(originData))
            });

            $( "#datepickerLeft" ).on('change', function(){
                setDate();
            });
            $( "#datepickerRight" ).on('change', function(){
                setDate();
            });
        }

        function addFilter(){
            let selectMenu = document.querySelector('.typeSelect');

            //專為E家教問卷開的filter
            if(templateId == "60c99e88598cbb69e1e89501" /*測試機E家教問卷*/ || 
                templateId == "60d2d80c223bda05a03bbb6b" /*正式機E家教問卷*/  ){
                let option1 = document.createElement('option'); 
                option1.value = 1;
                option1.innerText = "國小";
                selectMenu.appendChild(option1);

                let option2 = document.createElement('option'); 
                option2.value = 2;
                option2.innerText = "國、高中";
                selectMenu.appendChild(option2);

                let option3 = document.createElement('option'); 
                option3.value = 3;
                option3.innerText = "未填寫";
                selectMenu.appendChild(option3);   
            }                   
        }

        function filterData(data){
            let filterData = data;

            //專為E家教問卷開的filter
            if(templateId == "60c99e88598cbb69e1e89501" /*測試機E家教問卷*/ || 
                templateId == "60d2d80c223bda05a03bbb6b" /*正式機E家教問卷*/  ){
                filterData = data;
                    
                let ALL_GRADE = 0;
                let ELEMENTARY_GRADE = 1; 
                let HIGH_GRADE = 2; 
                let NONE_GRADE = 3; 

                switch(parseInt(typeSelectNum)){
                    case ALL_GRADE:{
                        filterData = data;
                        break;
                    }
                    case ELEMENTARY_GRADE:{
                        filterData = data.filter(datum => {
                            let qGrade = datum.questions[3];
                            if(!!qGrade){
                                let answer = qGrade.qContent[0].answer;
                                if(!!answer){
                                    return answer[0].includes('國小');
                                }else{
                                    return false;
                                }
                            }else{
                                return false;
                            }
                        });
                        break;
                    }
                    case HIGH_GRADE:{
                        filterData = data.filter(datum => {
                            let qGrade = datum.questions[3];
                            if(!!qGrade){
                                let answer = qGrade.qContent[0].answer;
                                if(!!answer){
                                    return answer[0].includes('國中') || answer[0].includes('高中');
                                }else{
                                    return false;
                                }
                            }else{
                                return false;
                            }
                        });
                        break;
                    }
                    case NONE_GRADE:{
                        filterData = data.filter(datum => {
                            let qGrade = datum.questions[3];
                            if(!!qGrade){
                                let answer = qGrade.qContent[0].answer;
                                if(!!answer){
                                    return false;
                                }else{
                                    return true;
                                }
                            }else{
                                return false;
                            }
                        });
                        break;
                    }
                }
            }
            return filterData;
        }

        function composeTable(data){
            composeTableTitle(data);
            contentLength = document.querySelectorAll('.table-content').length;
            pageCount = Math.ceil(contentLength/paginationCount);
            setPagination();
        }

        function setPagination(){
            currentPage = 0;
            let ul = document.querySelector('.pagination');
            ul.innerHTML = "";

            //previous pagination button
            let liBefore10 = document.createElement('li');
            liBefore10.addEventListener('click', (e) => {
                let remain = currentPage%5;
                changePage(-1*(pagination+remain));
            });
            liBefore10.classList.add('page-item');
            let divBefore10 = document.createElement('div');
            divBefore10.classList.add('page-link');
            divBefore10.innerText = '<<';
            liBefore10.appendChild(divBefore10);
            ul.appendChild(liBefore10);  

            //previous button
            let liBefore = document.createElement('li');
            liBefore.addEventListener('click', (e) => {
                changePage(-1);
            });
            liBefore.classList.add('page-item');
            let divBefore = document.createElement('div');
            divBefore.classList.add('page-link');
            divBefore.innerText = '<';
            liBefore.appendChild(divBefore);
            ul.appendChild(liBefore);    

            for(let i = 0;i<contentLength;i++){
                if(i==pagination || i==pageCount) break;

                let li = document.createElement('li');
                li.classList.add('page-item', 'page-item-content');
                let div = document.createElement('div');
                div.classList.add('page-link');
                if(i==0){
                    div.classList.add('bg-warning');
                }
                div.innerText = i+1;    
                div.dataset.page = i;
                li.appendChild(div);
                li.addEventListener('click', (e) => {
                    let current = document.querySelector('.bg-warning');
                    if (current) current.classList.remove('bg-warning');
                    e.target.classList.add('bg-warning');
                    currentPage = parseInt(e.target.dataset.page);
                    updatePageItems(currentPage);
                });
                ul.appendChild(li);            
            }

            //next button
            let liAfter = document.createElement('li');
            liAfter.addEventListener('click', (e) => {
                changePage(1);
            });
            liAfter.classList.add('page-item');
            let divAfter = document.createElement('div');
            divAfter.classList.add('page-link');
            divAfter.innerText = '>';
            liAfter.appendChild(divAfter);
            ul.appendChild(liAfter);    

            //next pagination button 
            let liAfter10 = document.createElement('li');
            liAfter10.addEventListener('click', (e) => {
                let remain = currentPage%5;
                changePage(pagination-remain);
            });
            liAfter10.classList.add('page-item');
            let divAfter10 = document.createElement('div');
            divAfter10.classList.add('page-link');
            divAfter10.innerText = '>>';
            liAfter10.appendChild(divAfter10);
            ul.appendChild(liAfter10);    

            document.querySelectorAll('.table-content').forEach((it, index)=>{
                if(index>=paginationCount){
                    it.style.visibility = 'hidden';
                    it.style.display = 'none';
                }else{
                    it.style.visibility = 'visible';
                    it.style.display = '';
                }
            });
        }

        function changePage(direction){
            if((direction<0 && currentPage==0) || (direction>0 && currentPage==pageCount-1)) return;
            if(currentPage+direction>pageCount-1) return;
            currentPage += direction;
            let currentPageTag = document.querySelector(`[data-page="${currentPage}"]`);
            if(currentPageTag==null){
                refreshPageTag();
            }else{
                currentPageHighLight();
            }
            updatePageItems(currentPage);
        }

        function refreshPageTag(){
            let list = document.querySelectorAll('.page-item-content');
            if(currentPage%pagination==0){
                list.forEach((it, index)=>{
                    it.style.display = "";
                    let innerDiv = it.querySelector('.page-link');
                    let tempPage = currentPage+index;
                    innerDiv.dataset.page = tempPage;
                    innerDiv.innerText = tempPage+1;
                    if(tempPage>pageCount-1){
                        it.style.display = "none";
                    }
                });
            }else{
                list.forEach((it, index)=>{
                    it.style.display = "";
                    let innerDiv = it.querySelector('.page-link');
                    let tempPage = currentPage+index-pagination+1;
                    innerDiv.dataset.page = tempPage;
                    innerDiv.innerText = tempPage+1;
                    if(tempPage>pageCount-1){
                        it.style.display = "none";
                    }
                });
            }
            currentPageHighLight();
        }

        function currentPageHighLight(){
            let current = document.querySelector('.bg-warning');
            if (current) current.classList.remove('bg-warning');
            let currentPageTag = document.querySelector(`[data-page="${currentPage}"]`);
            currentPageTag.classList.add('bg-warning');
        }

        function updatePageItems(page){
            let startNum = page*paginationCount;
            document.querySelectorAll('.table-content').forEach((it, index)=>{
                if(index>=startNum && index<startNum+paginationCount){
                    it.style.visibility = 'visible';
                    it.style.display = '';
                }else{
                    it.style.visibility = 'hidden';
                    it.style.display = 'none';
                }
            });
        }

        function composeTableTitle(template){
            let table = document.querySelector('#questionList');
            table.innerHTML = "";
            let tr = document.createElement('tr');
            table.appendChild(tr);
            if(template[0]===undefined || template[0]["questions"]===undefined){
                alert('此區間無資料');
            }else{
                template[0].questions.forEach((question)=>{
                    if(question.qContent!=null){
                        question.qContent.forEach((content)=>{
                            if(content.topic!="與上同題"){
                                let th = document.createElement('th');
                                th.classList.add('table-info');
                                th.innerText = topicRebuild(content.topic);
                                tr.appendChild(th);
                            }
                        });
                    }else{
                        let th = document.createElement('th');
                        th.classList.add('table-info');
                        th.innerText = topicRebuild(question.topic);
                        tr.appendChild(th);
                    }
                });
                let th = document.createElement('th');
                th.classList.add('table-info');
                th.innerText = "填寫時間";
                tr.appendChild(th);
                composeTableContent(template);
            }
        }

      function topicRebuild(topic){
          let returnTopic = topic;
          if(topic.includes('${year}')){
            returnTopic = topic.replace('${year}', new Date().getFullYear()-1911);
          }
          if(topic.includes('推薦人')){
            returnTopic = "推薦人姓名(其他)";
          }
          return returnTopic;
      }

      function composeTableContent(template){
        let table = document.querySelector('#questionList');
        template.forEach((it)=>{
            let tr = document.createElement('tr');
            tr.classList.add('table-content');
            table.appendChild(tr);
            it.questions.forEach((question)=>{
                if(question.qContent!=null){
                    let prevTh = null;
                    question.qContent.forEach((content, index)=>{
                        if(content.topic!="與上同題"){
                            let th = document.createElement('th');
                            if(content.answer!=null)
                                th.innerText = content.answer.join(',');
                            else
                                th.innerText = "未填寫";
                            tr.appendChild(th);
                            prevTh = th;
                        }else{
                            if(content.answer!=null)
                                prevTh.innerText = `${prevTh.innerText}, ${content.answer.join(',')}`;
                            else
                                prevTh.innerText = `${prevTh.innerText}, 未填寫`;
                            tr.appendChild(prevTh);
                        }
                    });
                }else{
                    let th = document.createElement('th');
                    if(question.answer!=null)
                        th.innerText = question.answer.join(',');
                    else
                        th.innerText = "未填寫";
                    tr.appendChild(th);
                }
            });
            let th = document.createElement('th');
            let time = new Date(it.finished);
            time.setTime(time.getTime() + (8*60*60*1000));
            th.innerText = time.toISOString().slice(0,19).replace('T', " ");
            tr.appendChild(th);
        });
      }
      
      init();
      })();